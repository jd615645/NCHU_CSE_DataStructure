#include <cstdio>
#include <iostream>
#include <queue>
#include <string>
using namespace std;
#define INF 99999999

int e[101][101], dis[101], book[101], path[101];

void init() {
  for (int i = 1; i <= 100; i++) {
    path[i] = -1;
    for (int j = 1; j <= 100; j++) {
      if (i == j) {
        e[i][j] = 0;
      }
      else {
        e[i][j] = INF;
      }
    }
  }
  path[1] = 0;
  path[2] = 1;
  path[11] = 1;

  e[1][2] = 8;
  e[2][3] = 25;
  e[3][4] = 26;
  e[4][5] = 15;
  e[5][6] = 23;
  e[6][7] = 12;
  e[7][8] = 30;
  e[8][9] = 5;
  e[9][10] = 20;
  e[11][12] = 24;
  e[12][13] = 48;
  e[13][14] = 50;
  e[14][15] = 15;
  e[15][16] = 10;
  e[16][17] = 41;
  e[17][18] = 42;
  e[18][19] = 66;
  e[19][20] = 18;
  e[21][22] = 29;
  e[22][23] = 49;
  e[23][24] = 74;
  e[24][25] = 13;
  e[25][26] = 35;
  e[26][27] = 44;
  e[27][28] = 10;
  e[28][29] = 19;
  e[29][30] = 21;
  e[31][32] = 50;
  e[32][33] = 32;
  e[33][34] = 22;
  e[34][35] = 14;
  e[35][36] = 15;
  e[36][37] = 12;
  e[37][38] = 15;
  e[38][39] = 26;
  e[39][40] = 12;
  e[41][42] = 16;
  e[42][43] = 10;
  e[43][44] = 33;
  e[44][45] = 7;
  e[45][46] = 33;
  e[46][47] = 10;
  e[47][48] = 47;
  e[48][49] = 77;
  e[49][50] = 46;
  e[51][52] = 29;
  e[52][53] = 19;
  e[53][54] = 22;
  e[54][55] = 16;
  e[55][56] = 7;
  e[56][57] = 21;
  e[57][58] = 22;
  e[58][59] = 24;
  e[59][60] = 23;
  e[61][62] = 16;
  e[62][63] = 31;
  e[63][64] = 33;
  e[64][65] = 25;
  e[65][66] = 31;
  e[66][67] = 35;
  e[67][68] = 37;
  e[68][69] = 69;
  e[69][70] = 5;
  e[71][72] = 21;
  e[72][73] = 24;
  e[73][74] = 74;
  e[74][75] = 10;
  e[75][76] = 20;
  e[76][77] = 11;
  e[77][78] = 45;
  e[78][79] = 32;
  e[79][80] = 9;
  e[81][82] = 19;
  e[82][83] = 34;
  e[83][84] = 55;
  e[84][85] = 34;
  e[85][86] = 20;
  e[86][87] = 35;
  e[87][88] = 37;
  e[88][89] = 45;
  e[89][90] = 26;
  e[91][92] = 16;
  e[92][93] = 22;
  e[93][94] = 27;
  e[94][95] = 20;
  e[95][96] = 41;
  e[96][97] = 38;
  e[97][98] = 32;
  e[98][99] = 64;
  e[99][100] = 23;
  e[1][11] = 29;
  e[11][21] = 33;
  e[21][31] = 46;
  e[31][41] = 15;
  e[41][51] = 39;
  e[51][61] = 49;
  e[61][71] = 18;
  e[71][81] = 33;
  e[81][91] = 17;
  e[2][12] = 5;
  e[12][22] = 26;
  e[22][32] = 23;
  e[32][42] = 15;
  e[42][52] = 14;
  e[52][62] = 41;
  e[62][72] = 15;
  e[72][82] = 42;
  e[82][92] = 39;
  e[3][13] = 32;
  e[13][23] = 52;
  e[23][33] = 61;
  e[33][43] = 26;
  e[43][53] = 50;
  e[53][63] = 7;
  e[63][73] = 61;
  e[73][83] = 63;
  e[83][93] = 29;
  e[4][14] = 41;
  e[14][24] = 11;
  e[24][34] = 15;
  e[34][44] = 40;
  e[44][54] = 6;
  e[54][64] = 44;
  e[64][74] = 6;
  e[74][84] = 38;
  e[84][94] = 21;
  e[5][15] = 9;
  e[15][25] = 35;
  e[25][35] = 5;
  e[35][45] = 23;
  e[45][55] = 22;
  e[55][65] = 20;
  e[65][75] = 56;
  e[75][85] = 5;
  e[85][95] = 11;
  e[6][16] = 29;
  e[16][26] = 31;
  e[26][36] = 28;
  e[36][46] = 33;
  e[46][56] = 47;
  e[56][66] = 3;
  e[66][76] = 45;
  e[76][86] = 46;
  e[86][96] = 41;
  e[7][17] = 14;
  e[17][27] = 19;
  e[27][37] = 36;
  e[37][47] = 41;
  e[47][57] = 42;
  e[57][67] = 43;
  e[67][77] = 34;
  e[77][87] = 14;
  e[87][97] = 24;
  e[8][18] = 18;
  e[18][28] = 39;
  e[28][38] = 68;
  e[38][48] = 45;
  e[48][58] = 30;
  e[58][68] = 44;
  e[68][78] = 61;
  e[78][88] = 25;
  e[88][98] = 48;
  e[9][19] = 42;
  e[19][29] = 5;
  e[29][39] = 34;
  e[39][49] = 37;
  e[49][59] = 8;
  e[59][69] = 55;
  e[69][79] = 9;
  e[79][89] = 46;
  e[89][99] = 50;
  e[10][20] = 26;
  e[20][30] = 36;
  e[30][40] = 30;
  e[40][50] = 5;
  e[50][60] = 26;
  e[60][70] = 8;
  e[70][80] = 53;
  e[80][90] = 45;
  e[90][100] = 18;
}

int main() {
  init();
  // n點，m邊
  int n = 100, m = 180;
  int u, min;

  // 初始化dis数组，这里是1号顶点到其余各个顶点的初始路程
  for (int i = 1; i <= n; i++) dis[i] = e[1][i];
  // book数组初始化
  for (int i = 1; i <= n; i++) book[i] = 0;
  book[1] = 1;

  // Dijkstra演算法核心
  for (int i = 1; i <= n - 1; i++) {
    // 找到離1點頂點最近的頂點
    min = INF;
    for (int j = 1; j <= n; j++) {
      if (book[j] == 0 && dis[j] < min) {
        min = dis[j];
        u = j;
      }
    }
    book[u] = 1;
    for (int v = 1; v <= n; v++) {
      if (e[u][v] < INF) {
        if (dis[v] > dis[u] + e[u][v]) {
          dis[v] = dis[u] + e[u][v];
          path[v] = u;
        }
      }
    }
  }

  //输出最终的结果
  // for (int i = 1; i <= n; i++) {
  //   cout << i << ": " << dis[i] << endl;
  // }

  int go[101];
  int tempPath = path[100];
  int count = 0;

  while(tempPath) {
    go[count++] = tempPath;
    tempPath = path[tempPath];
  }
  int goPaht[count-1];
  int count2 = 0;
  for (int i = count; i > 0; i--) {
    goPaht[count2++] = go[i - 1];
    // 1 -> 100 的路徑
    // cout << goPaht[count2 - 1] << " ";
  }
  cout << endl;

  count = 0;
  for (int i = 1; i <= 100; i++) {
    if (i == 1) {
      count++;
      cout << " S";
    }
    else if (i == 100) {
      cout << " D";
    }
    else if(goPaht[count] == i) {
      cout << " @";
      count++;
    }
    else {
      if (i < 10) {
        cout << "0";
      }
      cout << i;
    }

    if (i % 10 != 0) {
      cout << "-";
    }
    else if (i == 100) {
      cout << endl;
    }
    else {
      cout << endl;
      cout << " |  |  |  |  |  |  |  |  |  |" << endl;
    }
  }

  cout << "最短路徑 Cost 數: " << dis[n] << endl;
  cout << endl;

  return 0;
}